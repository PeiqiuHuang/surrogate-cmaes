%% ECML 2019 plots
% Script for making graphs showing the dependence of minimal function
% values on the number of function values of compared algorithms.
% 
% Created for ECML 2019 workshop article.

%% load data

% checkout file containing all loaded data
tmpFName = fullfile('/tmp', 'ecml2019_data.mat');
if (exist(tmpFName', 'file'))
  load(tmpFName);
else
  
% needed function and dimension settings
funcSet.BBfunc = 1:24;
funcSet.dims = [2, 3, 5, 10, 20];
maxEvals = 250;
  
% folder for results
actualFolder = pwd;
articleFolder = fullfile(actualFolder(1:end - 1 - length('surrogate-cmaes')), 'latex_scmaes', 'ecml2019workshop');
plotResultsFolder = fullfile(articleFolder, 'images');
tableFolder = fullfile(articleFolder, 'tex');
[~, ~] = mkdir(plotResultsFolder);
[~, ~] = mkdir(tableFolder);

% path settings
exppath = fullfile('exp', 'experiments');

dts_meta_path = fullfile(exppath, 'exp_doubleEC_28_metaGP_pi');
dts_cov_path = fullfile(exppath, 'exp_doubleEC_28_5cov');
% cmaes_path = fullfile(exppath, 'CMA-ES');

% load data
dataFolders = {dts_meta_path; ...
               dts_cov_path; ...
               };
             
[evals, settings] = catEvalSet(dataFolders, funcSet);

% find ids in settings
clear findSet
findSet.modelOpts.bestModelSelection = 'pitra2019landscape';
metaId = getStructIndex(settings, findSet);

clear findSet
findSet.modelOpts.hypOptions.covFcn = '{@covPoly, ''eye'', 1}';
linId = getStructIndex(settings, findSet);
findSet.modelOpts.hypOptions.covFcn = '@covSEiso';
seId = getStructIndex(settings, findSet);
findSet.modelOpts.hypOptions.covFcn = '{@covMaterniso, 5}';
matId = getStructIndex(settings, findSet);
findSet.modelOpts.hypOptions.covFcn = '@covRQiso';
rqId = getStructIndex(settings, findSet);
findSet.modelOpts.hypOptions.covFcn = '{@covSEvlen, {@meanSum, {@meanLinear, @meanConst}}}';
gibbsId = getStructIndex(settings, findSet);

% reference algorithms Ids
% clear findSet
% findSet.algName = 'CMA-ES';
% cma_Id = getStructIndex(settings, findSet);
             
% extract data
meta_data = evals(:, :, metaId);
lin_data = evals(:, :, linId);
se_data = evals(:, :, seId);
mat_data = evals(:, :, matId);
rq_data = evals(:, :, rqId);
gibbs_data = evals(:, :, gibbsId);

% cmaes_data     = evals(:, :, cma_Id);

% color settings
metaCol     = getAlgColors('dtscmaes');

linCol   = [255, 165,   0];  % orange (#ffa500)
seCol    = [255,   0,   0];  % light red (#ff0000)
matCol   = [255,   0, 255];  % magenta (#ff00ff)
rqCol    = [  0,   0, 255];  % middle blue (#0000ff)
gibbsCol = [133, 55,  106];  % dark violet (#85376a)

% marker settings
metaMark   = 'o';
linMark  = 'p';
seMark = '>';
matMark    = 'd';
rqMark  = 'x';
gibbsMark   = 'v';

% cmaesMark = 'x';

if (~exist(tmpFName, 'file'))
  save(tmpFName);
end

end

%% Covariance function comparison: Meta, LIN, SE, Matern, RQ, Gibbs
% Aggregation of function values across dimensions 2, 3, 5, 10, 20.

data = { ...
        meta_data, ...
        lin_data, ...
        se_data, ...
        mat_data, ...
        rq_data, ...
        gibbs_data ...
        };
      
datanames = { ...
    'T-DTS', ...
    'LIN', ...
    'SE', ...
    'Matern', ...
    'RQ', ...
    'Gibbs' ...
    };
  
colors = [metaCol; linCol; seCol; matCol; rqCol; gibbsCol]/255; 
markers = {metaMark; linMark; seMark; matMark; rqMark; gibbsMark};

% 5D
plotFuns = [1:24];
plotDims = [5];

clear pdfNames
pdfNames = {};
for f = plotFuns
  for d = plotDims
    pdfNames{end+1} = fullfile(plotResultsFolder, sprintf('alg_f%d_%dD', f, d));
  end
end

close all
han = relativeFValuesPlot(data, ...
                              'DataNames', datanames, 'DataDims', funcSet.dims, ...
                              'DataFuns', funcSet.BBfunc, 'Colors', colors, ...
                              'PlotFuns', plotFuns, 'PlotDims', plotDims, ...
                              'AggregateDims', false, 'OneFigure', false, ...
                              'Statistic', 'quantile', ...
                              'Quantiles', true(1, 6), ...
                              'AggregateFuns', false, ...
                              'LineSpecification', '-', ...
                              'LegendOption', 'first', ...
                              'MaxEval', maxEvals, ...
                              'Markers', markers, ...
                              'PlotGrid', [8, 3], ...
                              'MaxInstances', Inf, ...
                              'FunctionNames', true);
                            
print2pdf(han, pdfNames, 1)

% 20D
plotFuns = [1:24];
plotDims = [20];

clear pdfNames
pdfNames = {};
for f = plotFuns
  for d = plotDims
    pdfNames{end+1} = fullfile(plotResultsFolder, sprintf('alg_f%d_%dD', f, d));
  end
end

close all
han = relativeFValuesPlot(data, ...
                              'DataNames', datanames, 'DataDims', funcSet.dims, ...
                              'DataFuns', funcSet.BBfunc, 'Colors', colors, ...
                              'PlotFuns', plotFuns, 'PlotDims', plotDims, ...
                              'AggregateDims', false, 'OneFigure', false, ...
                              'Statistic', 'quantile', ...
                              'Quantiles', true(1, 6), ...
                              'AggregateFuns', false, ...
                              'LineSpecification', '-', ...
                              'LegendOption', 'first', ...
                              'MaxEval', maxEvals, ...
                              'Markers', markers, ...
                              'PlotGrid', [8, 3], ...
                              'MaxInstances', Inf, ...
                              'FunctionNames', true);
                            
print2pdf(han, pdfNames, 1)

%% Aggregated covariance comparison: DTS-CMA-ES with LIN, SE, RQ, Mat, Gibbs
% Aggregation of function values accross dimensions 5, 20.

data = { ...
        meta_data, ...
        lin_data, ...
        se_data, ...
        mat_data, ...
        rq_data, ...
        gibbs_data ...
        };
      
datanames = { ...
    'T-DTS', ...
    'LIN', ...
    'SE', ...
    'Matern', ...
    'RQ', ...
    'Gibbs' ...
    };
  
colors = [metaCol; linCol; seCol; matCol; rqCol; gibbsCol]/255; 
markers = {metaMark; linMark; seMark; matMark; rqMark; gibbsMark};

plotFuns = [1:24];
plotDims = [3, 5, 10, 20];

clear pdfNames
pdfNames = {};
for d = plotDims
  pdfNames{end+1} = fullfile(plotResultsFolder, sprintf('alg_%dD', d));
end

close all
han = relativeFValuesPlot(data, ...
                              'DataNames', datanames, 'DataDims', funcSet.dims, ...
                              'DataFuns', funcSet.BBfunc, 'Colors', colors, ...
                              'PlotFuns', plotFuns, 'PlotDims', plotDims, ...
                              'AggregateDims', false, 'OneFigure', false, ...
                              'Statistic', 'quantile', ...
                              'Quantiles', true(1, 6), ...
                              'AggregateFuns', true, ...
                              'LineSpecification', '-', ...
                              ... % 'LineWidth', [ 2*ones(1,5), ones(1,7) ], ...
                              'LegendOption', 'split', ...
                              'MaxEval', maxEvals, ...
                              'Markers', markers, ...
                              'PlotGrid', [2, 2], ...
                              'ScaleY08', true, ...
                              'MaxInstances', Inf, ...
                              'FunctionNames', true);

print2pdf(han, pdfNames, 1)
                            
%% Multiple comparison of algorithms with a statistical posthoc test.
close all

data = { ...
        meta_data, ...
        lin_data, ...
        se_data, ...
        mat_data, ...
        rq_data, ...
        gibbs_data ...
        };
      
datanames = { ...
    'T-DTS', ...
    'LIN', ...
    'SE', ...
    'Matern', ...
    'RQ', ...
    'Gibbs' ...
    };

tableFunc = 1:24;
tableDims = [5];

resultDuelTable = fullfile(tableFolder, 'duelTable.tex');
% resultStatsTable = fullfile(tableFolder, 'statsTable.tex');

[table, ranks] = duelTable(data, 'DataNames', datanames, ...
                            'DataFuns', funcSet.BBfunc, 'DataDims', funcSet.dims, ...
                            'TableFuns', tableFunc, 'TableDims', tableDims, ...
                            'Evaluations', [1/4 1], ...
                            'ResultFile', resultDuelTable);


%% final clearing
close all

%% GECCO 2019 article plots: Landscape Analysis of Gaussian Process Surrogates for the Covariance Matrix Adaptation Evolution Strategy
%
% *Paper abstract:*
% Gaussian processes modeling technique has been shown as a valuable 
% surrogate model for the Covariance Matrix Adaptation Evolution 
% Strategy (CMA-ES) in continuous single-objective black-box
% optimization tasks, where the optimized function is expensive. 
% In this paper, we investigate how different Gaussian process settings
% influence the error between the predicted and genuine population
% ordering in connection with features representing the fitness landscape. 
% Apart from using features for landscape analysis known
% from the literature, we propose a new set of features based on CMA-ES 
% state variables. We perform the landscape analysis of a large
% set of data generated using runs of a surrogate-assisted version of
% the CMA-ES on the noiseless part of the Comparing Continuous
% Optimisers benchmark function testbed.
% 
% Here we provide additional material which was not fully incorporated in
% the original paper.
%
% Created for GECCO 2019 article.

%%

% load data

% checkout file containing all loaded data
tmpFName = fullfile('/tmp', 'gecco2019_data.mat');
if (exist(tmpFName', 'file'))
  load(tmpFName);
else

%%

% folder for results
actualFolder = pwd;
articleFolder = fullfile(actualFolder(1:end - 1 - length('surrogate-cmaes')), 'latex_scmaes', 'gecco2019paper');
plotResultsFolder = fullfile(articleFolder, 'images');
tableFolder = fullfile(articleFolder, 'tex');
[~, ~] = mkdir(plotResultsFolder);
[~, ~] = mkdir(tableFolder);

% create tables from calculated features and save them

expfolder = fullfile('exp', 'experiments');
exp_id = 'exp_DTSmodels_meta_02';
exp_meta_output = fullfile(expfolder, exp_id, 'meta_output', 'exp_DTSmodels_meta_02_res.mat');
printScriptMess = false;

if ~isfile(exp_meta_output)
  if printScriptMess
    fprintf('Loading metalearing results\n')
  end
  [results, settings, resParams] = metaLearn_loadResults(fullfile(expfolder, exp_id), ...
    'ShowOutput', true, ...
    'SaveResults', exp_meta_output);
end

clear actualFolder articleFolder

%%

% Load calculated data

if printScriptMess
  fprintf('Loading results\n')
end
if isfile(exp_meta_output)
  res = load(exp_meta_output, 'results', 'settings', 'resParams');
else
  error('%s does not exist', exp_meta_output)
end

results = res.results;
mfts = res.resParams.mfts;

nModel = numel(unique(results.model));
% create model labels
modelLabels = {'NN', 'SE', 'LIN', 'Q', ...
               'Mat', 'RQ', 'SE+Q', 'Gibbs'};

%% 

% Removing metafeatures
% Remove user-defined, constant, NaN, and linearly dependent metafeatures.

% Process metafeatures

if printScriptMess
  fprintf('Processing metafeatures\n')
end
% remove user-defined metafeatures

% list of excluded metafeatures
%  3: basic.lower_min
%  4: basic.lower_max
%  5: basic.upper_min
%  6: basic.upper_max
%  7: basic.objective_min
%  8: basic.objective_max
%  9: basic.blocks_min
% 10: basic.blocks_max
% 11: basic.cells_total
% 12: basic.cells_filled
% 13: basic.minimize_fun

mfts_sets = {'archive', 'train', 'traintest'};
rem_mfts = {};
for ms = 1:numel(mfts_sets)
  mss = [mfts_sets{ms}, '_'];
  rem_mfts = [rem_mfts, {...
      [mss, 'basic_lower_min'], ...
      [mss, 'basic_lower_max'], ...
      [mss, 'basic_upper_min'], ...
      [mss, 'basic_upper_max'], ...
      [mss, 'basic_objective_min'], ...
      [mss, 'basic_objective_max'], ...
      [mss, 'basic_blocks_min'], ...
      [mss, 'basic_blocks_max'], ...
      [mss, 'basic_cells_total'], ...
      [mss, 'basic_cells_filled'], ...
      [mss, 'basic_minimize_fun'], ...
      [mss, 'ela_metamodel_lin_simple_intercept'] ...
    }];
end
% also remove only train and trainset metafeatures identical for all mfts
% sets
rem2_mfts = {};
for ms = 2:numel(mfts_sets)
  mss = [mfts_sets{ms}, '_'];
  rem2_mfts = [rem2_mfts, {...
      [mss, 'basic_dim'], ...
      [mss, 'cmaes_cma_evopath_c_norm'], ...
      [mss, 'cmaes_cma_evopath_s_norm'], ...
      [mss, 'cmaes_cma_generation'], ...
      [mss, 'cmaes_cma_restart'], ...
      [mss, 'cmaes_cma_step_size'] ...
    }];
end
rem_mfts = [rem_mfts, rem2_mfts];

fprintf('Removing user-defined metafeatures:\n')
for m = 1:numel(rem_mfts)
  mId = strcmp(mfts.Properties.VariableNames, rem_mfts{m});
  fprintf('%s\n', rem_mfts{m})
  mfts = mfts(:, ~mId);
end

% rename archive identical columns (see above)
mfts.Properties.VariableNames{'archive_basic_dim'} = 'dimension';
mfts.Properties.VariableNames{'archive_cmaes_cma_evopath_c_norm'} = ...
                                      'cmaes_evopath_c_norm';
mfts.Properties.VariableNames{'archive_cmaes_cma_evopath_s_norm'} = ...
                                      'cmaes_evopath_s_norm';
mfts.Properties.VariableNames{'archive_cmaes_cma_generation'} = ...
                                      'cmaes_generation';
mfts.Properties.VariableNames{'archive_cmaes_cma_restart'} = ...
                                      'cmaes_restart';
mfts.Properties.VariableNames{'archive_cmaes_cma_step_size'} = ...
                                      'cmaes_step_size';
% rename observations columns
mfts.Properties.VariableNames{'archive_basic_observations'} = 'archive_observations';
mfts.Properties.VariableNames{'train_basic_observations'}   = 'train_observations';
mfts.Properties.VariableNames{'traintest_basic_observations'} = 'traintest_observations';

% create mfts table, where only user defined metafeatures are not present
full_mfts = mfts;

clear rem_mfts rem2_mfts m mId mss

%%

% Remove constant or NaN features
varMfts = varfun(@nanvar, mfts(:, 6:end), 'OutputFormat','uniform');
constId = varMfts == 0;
nanId = isnan(varMfts);

% constant
% add fun, dim, inst, id, and gen columns
constId = [false(1, 5), constId]; 
if any(constId)
  fprintf('Removing constant metafeatures:\n')
  constNumId = find(constId);
  for m = constNumId
    fprintf('%s\n', mfts.Properties.VariableNames{m})
  end
end

% NaN
% add fun, dim, inst, id, and gen columns
nanId = [false(1, 5), nanId]; 
if any(nanId)
  fprintf('Removing NaN metafeatures:\n')
  nanNumId = find(nanId);
  for m = nanNumId
    fprintf('%s\n', mfts.Properties.VariableNames{m})
  end
end
% actual removement
mfts(:, constId | nanId) = [];

clear varMfts constId nanId constNumId nanNumId m

%%

% Remove linearly dependent metafeatures

% tolerance for linear dependency
tol = eps; % eps;

mfts_only = mfts(:, 6:end);
mfts_arr = table2array(mfts_only);
nanInfMftsId = isnan(mfts_arr) + 2*isinf(mfts_arr);
% find columns where nan and Inf positions are identical
[~, nanInfDependent] = ismember(nanInfMftsId', nanInfMftsId', 'rows');
% cycle through identical positions to find linear dependencies of the
% remaining data
nanInfGroup = unique(nanInfDependent);
mfId = [];
for g = nanInfGroup'
  gid = g == nanInfDependent;
  % array consisting non-nan or inf rows of specific group
  subArray = mfts_arr(~nanInfMftsId(:, find(gid, 1, 'first')), gid);
  % exclude equal metafeatures
  [~, gEqId] = intersect(subArray', subArray', 'rows');
  % normalize columns
%   subArray = subArray./repmat(sum(subArray), size(subArray, 1), 1);
  % find linear independent columns of reduced group table
  [~, gDepId] = licols(subArray(:, gEqId), tol);
  gidNum = find(gid);
  % add independent metafeatures including NaNs and Infs
  mfId = [mfId; gidNum(gEqId(gDepId))];
end
% resulting table
mfts_indep = [mfts(:, 1:5), mfts_only(:, sort(mfId))];

nFeat = numel(mfId);
% print dependent metafeatures
if nFeat < numel(mfts_only.Properties.VariableNames)
  mfts_dep = mfts_only.Properties.VariableNames(...
    ~ismember(mfts_only.Properties.VariableNames, ...
              mfts_indep.Properties.VariableNames));
  fprintf('Removing dependent metafeatures:\n')
  for m = 1:numel(mfts_dep)
    fprintf('%s\n', mfts_dep{m})
  end
end

clear tol mfts_only mfts_arr nanInfMftsId nanInfDependent nanInfGroup mfId ...
      g gid subArray gEqId gDepId gidNum nFeat mfts_dep m

%%

% Cat model results with metafeatures

if printScriptMess
  fprintf('Concatenating model results and metafeatures\n')
end
err_name = {'rdeValid', 'rde'};
errPenalty = 1;
modelLabels_friend = {'NN', 'SE', 'LIN', 'QUAD', ...
                     'Matern', 'RQ', 'SE_QUAD', 'Gibbs'};
full_mfts_err = full_mfts;

for e = 1:numel(err_name)
  % form table containing rde results from all models
  for m = 1:nModel
    model_err = results(results.model == m, {'fun', 'dim', 'inst', 'gen', 'id', err_name{e}});
    model_err.Properties.VariableNames{err_name{e}} = ...
      sprintf('%s_%s', err_name{e}, modelLabels_friend{m});
    if m == 1
      err_table = model_err;
    else
      err_table = outerjoin(err_table, model_err, 'MergeKeys', true);
    end
  end
  % join all metafeatures and error values of individual models without
  % replacing missing errors
  full_mfts_err = innerjoin(err_table, full_mfts_err);
  % model error column names
%   modelLabels_err = cellfun(@(x) [err_name, '_', x], modelLabels_friend, ...
%                             'UniformOutput', false);
%   full_mfts_err.Properties.VariableNames = ...
%     [modelLabels_err, full_mfts_err.Properties.VariableNames(9:end)];
end
% create extra full_mfts_err for visualisation
full_mfts_vis = full_mfts_err;
% remove identification columns (fun, dim, inst, gen, model)
full_mfts_err = full_mfts_err(:, [1, 3, 5, 6:end]);

% replace missing errors and inf errors by penalty term
% cannot use fillmissing(err_table, 'constant', errPenalty) - not 
% implemented in R2015b
for m = 1:nModel
  col_name = sprintf('%s_%s', err_name{e}, modelLabels_friend{m});
  err_table.(col_name)(isnan(err_table.(col_name))) = errPenalty;
end

% join metafeatures and error values of individual models
mfts_err = innerjoin(err_table, mfts_indep);
full_mfts_vis = innerjoin(err_table, full_mfts_vis(:, [1:5, 22:end]));

clear err_name errPenalty modelLabels_friend full_mfts full_mfts_err e m ...
      model_err err_table col_name

%%
if (~exist(tmpFName, 'file'))
  save(tmpFName);
end

end

%% $\textrm{RDE}_\mu$ regardless sample set
% Features in the following plots pertain to all types of sample sets.
% 
% Median (solid lines) and first and third quartiles
% (dash-dot lines) of $\textrm{RDE}_\mu$ values dependency on individual
% features for all tested covariances calculated on all available datasets.

if printScriptMess
  fprintf('Starting visual inspection\n')
end
nPointsToPlot = 200;
logBound = 5;
medianLineWidth = 1.8;
quartileLineWidth = 1;
medianLineStyle = '-';
quartileLineStyle = '-.';

kerColor = getAlgColors([1, 2, 3, 12, 10, 11, 8, 5]) / 255;

nExtF = 55;
mfts_order_id = [14, 16:18, 20:21]; % identical for sample sets
mfts_order_nonid = [...        not identical for sample sets
              15, 80, 138, ... observations
              19, 78, 136, ... cma_mean_dist
              22, 79, 137, ... cma_lik
              reshape(22 + repmat([0,58,116]', 1, nExtF) ...
                + [(1:nExtF); (1:nExtF); (1:nExtF)], 1, 3*nExtF)];

close all
 
metafeaturePlot(full_mfts_vis(:, mfts_order_id), full_mfts_vis(:, 6:13), ...
                'DataColor', kerColor, ...
                'DataNames', modelLabels, ...
                'MftsNames', full_mfts_vis.Properties.VariableNames(mfts_order_id), ...
                'NValues', 200, ...
                'LogBound', 2, ...
                'QuantileRange', [0.05, 0.95], ...
                'MedianLW', 1.8, ...
                'QuartileLW', 1, ...
                'MedianLS', '-', ...
                'QuartileLS', '-.' ...
  );

%% $\textrm{RDE}_\mu$ on number of observations
% 
% Number of observations differs according to the sample set on
% which they were calculated: 
% |archive| $\mathcal{A}$, 
% |train| $\mathcal{T}$, and
% |traintest| $\mathcal{T}_\mathcal{P}$.
%
% Median (solid lines) and first and third quartiles
% (dash-dot lines) of $\textrm{RDE}_\mu$ values dependency on individual
% features for all tested covariances calculated on all available datasets.

close all

fId = 1:3;

metafeaturePlot(full_mfts_vis(:, mfts_order_nonid(fId)), full_mfts_vis(:, 6:13), ...
                'DataColor', kerColor, ...
                'DataNames', modelLabels, ...
                'MftsNames', full_mfts_vis.Properties.VariableNames(mfts_order_nonid(fId)), ...
                'NValues', 200, ...
                'LogBound', 2, ...
                'QuantileRange', [0.05, 0.95], ...
                'MedianLW', 1.8, ...
                'QuartileLW', 1, ...
                'MedianLS', '-', ...
                'QuartileLS', '-.' ...
  );

%% $\textrm{RDE}_\mu$ on CMA-ES features
% 
% CMA features differ according to the sample set on
% which they were calculated: 
% |archive| $\mathcal{A}$, 
% |train| $\mathcal{T}$, and
% |traintest| $\mathcal{T}_\mathcal{P}$.
%
% Median (solid lines) and first and third quartiles
% (dash-dot lines) of $\textrm{RDE}_\mu$ values dependency on individual
% features for all tested covariances calculated on all available datasets.

close all

fId = 4:7;

metafeaturePlot(full_mfts_vis(:, mfts_order_nonid(fId)), full_mfts_vis(:, 6:13), ...
                'DataColor', kerColor, ...
                'DataNames', modelLabels, ...
                'MftsNames', full_mfts_vis.Properties.VariableNames(mfts_order_nonid(fId)), ...
                'NValues', 200, ...
                'LogBound', 2, ...
                'QuantileRange', [0.05, 0.95], ...
                'MedianLW', 1.8, ...
                'QuartileLW', 1, ...
                'MedianLS', '-', ...
                'QuartileLS', '-.' ...
  );

metafeaturePlot(full_mfts_vis(:, mfts_order_nonid(8:9)), full_mfts_vis(:, 6:13), ...
                'DataColor', kerColor, ...
                'DataNames', modelLabels, ...
                'MftsNames', full_mfts_vis.Properties.VariableNames(mfts_order_nonid(8:9)), ...
                'NValues', 200, ...
                'LogBound', 2, ...
                'QuantileRange', [0.05, 0.95], ...
                'Select', 'negative', ...
                'MedianLW', 1.8, ...
                'QuartileLW', 1, ...
                'MedianLS', '-', ...
                'QuartileLS', '-.' ...
  );

%% $\textrm{RDE}_\mu$ on Dispersion features
% 
% Dispersion features differ according to the sample set on
% which they were calculated: 
% |archive| $\mathcal{A}$, 
% |train| $\mathcal{T}$, and
% |traintest| $\mathcal{T}_\mathcal{P}$.
%
% Median (solid lines) and first and third quartiles
% (dash-dot lines) of $\textrm{RDE}_\mu$ values dependency on individual
% features for all tested covariances calculated on all available datasets.

close all

fId = 10:57;

metafeaturePlot(full_mfts_vis(:, mfts_order_nonid(fId)), full_mfts_vis(:, 6:13), ...
                'DataColor', kerColor, ...
                'DataNames', modelLabels, ...
                'MftsNames', full_mfts_vis.Properties.VariableNames(mfts_order_nonid(fId)), ...
                'NValues', 200, ...
                'LogBound', 2, ...
                'QuantileRange', [0.05, 0.95], ...
                'MedianLW', 1.8, ...
                'QuartileLW', 1, ...
                'MedianLS', '-', ...
                'QuartileLS', '-.' ...
  );

%% $\textrm{RDE}_\mu$ on y-Distribution features
% 
% y-Distribution features differ according to the sample set on
% which they were calculated: 
% |archive| $\mathcal{A}$, 
% |train| $\mathcal{T}$, and
% |traintest| $\mathcal{T}_\mathcal{P}$.
%
% Median (solid lines) and first and third quartiles
% (dash-dot lines) of $\textrm{RDE}_\mu$ values dependency on individual
% features for all tested covariances calculated on all available datasets.

close all

fId = 58:66;

metafeaturePlot(full_mfts_vis(:, mfts_order_nonid(fId)), full_mfts_vis(:, 6:13), ...
                'DataColor', kerColor, ...
                'DataNames', modelLabels, ...
                'MftsNames', full_mfts_vis.Properties.VariableNames(mfts_order_nonid(fId)), ...
                'NValues', 200, ...
                'LogBound', 2, ...
                'QuantileRange', [0.05, 0.95], ...
                'MedianLW', 1.8, ...
                'QuartileLW', 1, ...
                'MedianLS', '-', ...
                'QuartileLS', '-.' ...
  );

%% $\textrm{RDE}_\mu$ on Levelset features
% 
% Levelset features differ according to the sample set on
% which they were calculated: 
% |archive| $\mathcal{A}$, 
% |train| $\mathcal{T}$, and
% |traintest| $\mathcal{T}_\mathcal{P}$.
%
% Median (solid lines) and first and third quartiles
% (dash-dot lines) of $\textrm{RDE}_\mu$ values dependency on individual
% features for all tested covariances calculated on all available datasets.

close all

fId = 67:120;

metafeaturePlot(full_mfts_vis(:, mfts_order_nonid(fId)), full_mfts_vis(:, 6:13), ...
                'DataColor', kerColor, ...
                'DataNames', modelLabels, ...
                'MftsNames', full_mfts_vis.Properties.VariableNames(mfts_order_nonid(fId)), ...
                'NValues', 200, ...
                'LogBound', 2, ...
                'QuantileRange', [0.05, 0.95], ...
                'MedianLW', 1.8, ...
                'QuartileLW', 1, ...
                'MedianLS', '-', ...
                'QuartileLS', '-.' ...
  );

%% $\textrm{RDE}_\mu$ on Metamodel features
% 
% Metamodel features differ according to the sample set on
% which they were calculated: 
% |archive| $\mathcal{A}$, 
% |train| $\mathcal{T}$, and
% |traintest| $\mathcal{T}_\mathcal{P}$.
%
% Median (solid lines) and first and third quartiles
% (dash-dot lines) of $\textrm{RDE}_\mu$ values dependency on individual
% features for all tested covariances calculated on all available datasets.

close all

fId = 121:144;

metafeaturePlot(full_mfts_vis(:, mfts_order_nonid(fId)), full_mfts_vis(:, 6:13), ...
                'DataColor', kerColor, ...
                'DataNames', modelLabels, ...
                'MftsNames', full_mfts_vis.Properties.VariableNames(mfts_order_nonid(fId)), ...
                'NValues', 200, ...
                'LogBound', 2, ...
                'QuantileRange', [0.05, 0.95], ...
                'MedianLW', 1.8, ...
                'QuartileLW', 1, ...
                'MedianLS', '-', ...
                'QuartileLS', '-.' ...
  );

%% $\textrm{RDE}_\mu$ on Information content features
% 
% Information content features differ according to the sample set on
% which they were calculated: 
% |archive| $\mathcal{A}$, 
% |train| $\mathcal{T}$, and
% |traintest| $\mathcal{T}_\mathcal{P}$.
%
% Median (solid lines) and first and third quartiles
% (dash-dot lines) of $\textrm{RDE}_\mu$ values dependency on individual
% features for all tested covariances calculated on all available datasets.

close all

fId = 145:159;

metafeaturePlot(full_mfts_vis(:, mfts_order_nonid(fId)), full_mfts_vis(:, 6:13), ...
                'DataColor', kerColor, ...
                'DataNames', modelLabels, ...
                'MftsNames', full_mfts_vis.Properties.VariableNames(mfts_order_nonid(fId)), ...
                'NValues', 200, ...
                'LogBound', 2, ...
                'QuantileRange', [0.05, 0.95], ...
                'MedianLW', 1.8, ...
                'QuartileLW', 1, ...
                'MedianLS', '-', ...
                'QuartileLS', '-.' ...
  );

%% $\textrm{RDE}_\mu$ on NBC features
% 
% NBC features differ according to the sample set on
% which they were calculated: 
% |archive| $\mathcal{A}$ and 
% |train| $\mathcal{T}$.
% NBC features are 
% impossible to calculate using points without fitness values.
% Therefore, values calculated on |traintest| $\mathcal{T}_\mathcal{P}$ 
% are missing.
%
% Median (solid lines) and first and third quartiles
% (dash-dot lines) of $\textrm{RDE}_\mu$ values dependency on individual
% features for all tested covariances calculated on all available datasets.

close all

% remove traintest plots
fId = sort([160:3:174, 161:3:174]);

metafeaturePlot(full_mfts_vis(:, mfts_order_nonid(fId)), full_mfts_vis(:, 6:13), ...
                'DataColor', kerColor, ...
                'DataNames', modelLabels, ...
                'MftsNames', full_mfts_vis.Properties.VariableNames(mfts_order_nonid(fId)), ...
                'NValues', 200, ...
                'LogBound', 2, ...
                'QuantileRange', [0.05, 0.95], ...
                'MedianLW', 1.8, ...
                'QuartileLW', 1, ...
                'MedianLS', '-', ...
                'QuartileLS', '-.' ...
  );

%% Kolmogorov-Smirnov test
% The visualisation of the p-values of the Kolmogorov-Smirnov test 
% comparing the equality of probability distributions of individual 
% features on all data and on those data on which a particular covariance 
% function scored best. Non-red colored squares denote KS test results 
% rejecting the equality of both distributions with the Holm correction at 
% the family-wise significance level $\alpha = 0.05$, otherwise, p-values 
% are visualised as red squares. Missing squares in 
% $\mathcal{T}_\mathcal{P}$ rows denote features impossible
% to calculate using points without fitness values. 
% $\Phi_\textrm{MM}$ notation: |l| – |lin|, |q| – |quad|, |s| – |simple|, 
% |i| – |interact|, |c| – |coef|.
%
% The exact p-values can be found 
% <http://uivty.cs.cas.cz/~cma/gecco2019/ksres.pdf here>.

% Martin's code:
% UsableTable = full_mfts_err(~all(isnan(table2array(full_mfts_err(:, 1:8))), 2), :);
% ColumnNames = full_mfts_err.Properties.VariableNames;
% MetafeatureNames = cell(4, 58);
% MetafeatureNames(1, 1:6) = ColumnNames([9, 11:13, 15, 16]);
% MetafeatureNames(2:4, :) = ColumnNames([14, 17, 10, 18:72; 73:130; 131:188]);
% ReorderedTable = UsableTable(:, [1:9, 11:13, 15, 16, 14, 17, 10, 18:188]);
% Best=zeros(size(ReorderedTable,1),8);
% for r=1:size(ReorderedTable,1)
%   for c=1:8
%     if ~isnan(ReorderedTable(r,c))&&ReorderedTable(r,c)==min(ReorderedTable(r,~isnan(ReorderedTable(r,1:8))))
%       Best(r,c)=true;
%     end
%   end
% end
% for c=1:6
%   Distributions{1,c}=ReorderedTable(~isnan(ReorderedTable(:,c+8)),c+8);
% end
% for r=2:4
%   for c=1:58
%     Distributions{r,c}=ReorderedTable(~isnan(ReorderedTable(:,c+14+(r-2)*58)),c+14+(r-2)*58);
%   end
% end
% UncorrectedSignificance(1,7:58,1:8)=Inf;
% UncorrectedSignificance(4,54:58,1:8)=Inf;
% for m=1:8
%   for c=1:6
%     [~, UncorrectedSignificance(1,c,m)] = ...
%       kstest2(ReorderedTable(~isnan(ReorderedTable(:, c+8)) & ...
%                              Best(:, m), c+8), ...
%               Distributions{1, c});
%   end
%   for r=2:4
%     for c=1:53+5*sign(4-r)
%       [~, UncorrectedSignificance(r,c,m)] = ...
%         kstest2(ReorderedTable(~isnan(ReorderedTable(:, c+14+(r-2)*58)) & ...
%                                Best(:, m), c+14+(r-2)*58), ...
%                 Distributions{r,c});
%     end
%   end
% end
% VectorizedUncorrectedSignificance = reshape(UncorrectedSignificance, 4*58*8, 1);
% VectorizedCorrectedSignificance(1:1856, 1) = Inf;
% VectorizedCorrectedSignificance(isfinite(VectorizedUncorrectedSignificance)) = ...
%   bonf_holm(VectorizedUncorrectedSignificance(isfinite(VectorizedUncorrectedSignificance)));
% CorrectedSignificance = reshape(VectorizedCorrectedSignificance, 4, 58, 8);
% Significant05 = CorrectedSignificance < 0.05;

% load Martin's results
ks_res_file = fullfile(expfolder, exp_id, 'kstest_meta.mat');
ks_res = load(ks_res_file, 'CorrectedSignificance', 'ReorderedTable', ...
                           'MetafeatureNames', 'Best', 'Distributions');
%% 

% KS test table

% significance table
ks_sign = ks_res.CorrectedSignificance;
ks_sign(isinf(ks_sign)) = NaN;
% metafeatures identical accross origin
nIdentical = sum(~isnan(ks_sign(1, :, 1)));
ks_sign = [[ks_sign(1, 1:nIdentical, :); NaN(2, nIdentical, nModel)], ...
           ks_sign(2:4, :, :)];
ks_sign_2 = [];
for m = 1:nModel
  ks_sign_2 = [ks_sign_2, ks_sign(:, :, m)'];
end
% replace p-values greater than one by one
ks_sign_2(ks_sign_2 > 1) = 1;

% metafeature names

% ks table setting
ksTabSet.ResultFile = fullfile(tableFolder, 'ksTable.tex');
ksTabSet.ColGroups = {'NN', 'SE', 'LIN', 'Q', 'Mat', 'RQ', 'SE + Q', 'Gibbs'};
ksTabSet.ColGroupNum = 3*ones(1, nModel);
ksTabSet.ColValName = '$\sampleset$';
ksTabSet.ColNames = repmat(...
                    {'$\archive$', '$\trainset$', '$\trainpredset$'}, ...
                    1, nModel);
featNames = { ...
    'dimension', ...
    ... cmaes
    'generation', ...
    'step_size', ...
    'restart', ...
    'evopath_c_norm', ...
    'evopath_s_norm', ...
    ...
    'cma_mean_dist', ...
    'cma_lik', ...
    ... 
    'observations', ...
    ... dispersion
    'ratio_mean_02', ...
    'ratio_median_02', ...
    'diff_mean_02', ...
    'diff_median_02', ...
    'ratio_mean_05', ...
    'ratio_median_05', ...
    'diff_mean_05', ...
    'diff_median_05', ...
    'ratio_mean_10', ...
    'ratio_median_10', ...
    'diff_mean_10', ...
    'diff_median_10', ...
    'ratio_mean_25', ...
    'ratio_median_25', ...
    'diff_mean_25', ...
    'diff_median_25', ...
    ... ela_distribution
    'skewness', ...
    'kurtosis', ...
    'num_of_peaks', ...
    ... ela_levelset
    'mmce_lda_10', ...
    'mmce_qda_10', ...
    'mmce_mda_10', ...
    'lda_qda_10', ...
    'lda_mda_10', ...
    'qda_mda_10', ...
    'mmce_lda_25', ...
    'mmce_qda_25', ...
    'mmce_mda_25', ...
    'lda_qda_25', ...
    'lda_mda_25', ...
    'qda_mda_25', ...
    'mmce_lda_50', ...
    'mmce_qda_50', ...
    'mmce_mda_50', ...
    'lda_qda_50', ...
    'lda_mda_50', ...
    'qda_mda_50', ...
    ... ela_metamodel
    'l_s_adj_r2', ... 'lin_simple_adj_r2', ...
    'l_s_c_min', ... 'lin_simple_coef_min', ...
    'l_s_c_max', ... 'lin_simple_coef_max', ...
    'l_s_c_max_min', ... 'lin_simple_coef_max_by_min', ...
    'l_w_i_adj_r2', ... 'lin_w_interact_adj_r2', ...
    'q_s_adj_r2', ... 'quad_simple_adj_r2', ...
    'q_s_cond', ... 'quad_simple_cond', ...
    'q_w_i_adj_r2', ... 'quad_w_interact_adj_r2', ...
    ... infocontent
    'h_max', ...
    'eps_s', ...
    'eps_max', ...
    'm0', ...
    'eps_ratio', ...
    ... nearest_better
    'nb_std_ratio', ...
    'nb_mean_ratio', ...
    'nb_cor', ...
    'dist_ratio', ...
    'nb_fitness_cor', ...
  };
% change _ to \_
tableFeatNames = cellfun(@(x) ['\\texttt{', strrep(x, '_', '\\_'), '}'], ...
                            featNames, ...
                            'UniformOutput', false);
featNonId = [nIdentical + [3,1,2], nIdentical+4 : numel(tableFeatNames)];
ksTabSet.RowNames = tableFeatNames(featNonId);
ksTabSet.RowGroups = {'\npt', '$\featCMA$', '$\featDisp$', '$\featyDis$', ...
                      '$\featLevel$', '$\featMM$', '$\featInfo$', '$\featNBC$', ...
                      };
ksTabSet.RowGroupNum = [1, 2, 16, 3, 18, 8, 5, 5];
ksTabSet.RowValName = '$\featset{}$';
ksTabSet.Caption = ['The p-values of the Kolmogorov-Smirnov test comparing the equality of ',...
        'probability distributions of individual features on all data ', ...
        'and on those data on which a particular covariance function scored best. ', ...
        'P-values denote KS test results ', ...
        'rejecting the equality of both distributions with the Holm ', ...
        'correction at the family-wise significance level $\alpha=0.05$, ', ...
        'otherwise, p-values are not shown. ', ...
        '''{\normalfont X}'' values in $\trainpredset$ column denote features impossible to calculate with points without fitness values. ', ...
        'Zeros indicate p-values below the smallest double precision number. ', ...
        '$\featMM$ notation: \texttt{l} -- \texttt{lin}, \texttt{q} -- \texttt{quad}, \texttt{s} -- \texttt{simple}, ', ...
        '\texttt{i} -- \texttt{interact}, \texttt{c} -- \texttt{coef}.'];

% settings for identical ks table
ksTabSetInd.ColGroups = '';
ksTabSetInd.ColGroupNum = [];
ksTabSetInd.ColNames = {'NN', 'SE', 'LIN', 'Q', 'Mat', 'RQ', 'SE+Q', 'Gibbs'};
ksTabSetInd.RowNames = tableFeatNames(1:nIdentical);
ksTabSetInd.RowGroups = {'\dm', '$\featCMA$'};
ksTabSetInd.RowGroupNum = [1, 5];
ksTabSetInd.ResultFile = fullfile(tableFolder, 'ksIndTable.tex');
ksTabSetInd.TableWidth = '\columnwidth';
ksTabSetInd.OneColumn = true;
ksTabSetInd.Caption = ['The p-values of the Kolmogorov-Smirnov test comparing the equality of ',...
        'probability distributions of individual features on all data ', ...
        'and on those data on which a particular covariance function scored best. ', ...
        'Features in table pertain to all types of sample sets. ', ...
        'P-values denote KS test results ', ...
        'rejecting the equality of both distributions with the Holm ', ...
        'correction at the family-wise significance level $\alpha=0.05$, ', ...
        'otherwise, p-values are not shown. ', ...
        'Zeros indicate p-values below the smallest double precision number. '];

%% 

% KS test image
close all

% image settings
sizeY = 17;
sizeX = 34;
labelRot = 60;
plotNames = {fullfile(plotResultsFolder, 'ks_fig.pdf')};

% image model labels
imgModelLabels = {'   NN', '   SE', '  LIN', '    Q', '  Mat', '   RQ', ' SE+Q', 'Gibbs'};
% set names
setNames = {'$\mathcal{A}\ $', '$\mathcal{T}\ $', '\mathcal{T}_\mathcal{P}'};
% create combinations cov x set
modelSetNames = {};
for m = 1:nModel
  modelSetNames{end+1} = setNames{1};
  modelSetNames{end+1} = [imgModelLabels{m}, ' \ \ ', setNames{2} ];
  if m < nModel
    modelSetNames{end+1} = ['$\overline{\phantom{AAA}}\quad', setNames{3}, '$' ];
  else
    modelSetNames{end+1} = ['$' setNames{3} '$'];
  end
%   end
end

% feature names
imgFeatNames = { ...
    '$N$ \quad\texttt{observations}', ...
    ... cmaes
    '$\overline{\phantom{,}\Phi_\textrm{CMA}}$  \texttt{cma\_mean\_dist}', ...
    '\texttt{cma\_lik}', ...
    ... dispersion
    '$\overline{\phantom{AAAA}}$\quad\texttt{ratio\_mean\_02}', ...
    '\texttt{ratio\_median\_02}', ...
    '\texttt{diff\_mean\_02}', ...
    '\texttt{diff\_median\_02}', ...
    '\texttt{ratio\_mean\_05}', ...
    '\texttt{ratio\_median\_05}', ...
    '\texttt{diff\_mean\_05}', ...
    '$\Phi_\textrm{Dis}$\ \ \texttt{diff\_median\_05}', ...
    '\texttt{ratio\_mean\_10}', ...
    '\texttt{ratio\_median\_10}', ...
    '\texttt{diff\_mean\_10}', ...
    '\texttt{diff\_median\_10}', ...
    '\texttt{ratio\_mean\_25}', ...
    '\texttt{ratio\_median\_25}', ...
    '\texttt{diff\_mean\_25}', ...
    '\texttt{diff\_median\_25}', ...
    ... ela_distribution
    '$\overline{\phantom{AAAA}}$\qquad\quad\ \texttt{skewness}', ...
    '$\Phi_\textrm{y-D}$ \qquad\quad\texttt{kurtosis}', ...
    '\texttt{num\_of\_peaks}', ...
    ... ela_levelset
    '$\overline{\phantom{AAAA}}$\qquad\texttt{mmce\_lda\_10}', ...
    '\texttt{mmce\_qda\_10}', ...
    '\texttt{mmce\_mda\_10}', ...
    '\texttt{lda\_qda\_10}', ...
    '\texttt{lda\_mda\_10}', ...
    '\texttt{qda\_mda\_10}', ...
    '\texttt{mmce\_lda\_25}', ...
    '\texttt{mmce\_qda\_25}', ...
    '$\Phi_\textrm{Lvl}$ \qquad\texttt{mmce\_mda\_25}', ...
    '\texttt{lda\_qda\_25}', ...
    '\texttt{lda\_mda\_25}', ...
    '\texttt{qda\_mda\_25}', ...
    '\texttt{mmce\_lda\_50}', ...
    '\texttt{mmce\_qda\_50}', ...
    '\texttt{mmce\_mda\_50}', ...
    '\texttt{lda\_qda\_50}', ...
    '\texttt{lda\_mda\_50}', ...
    '\texttt{qda\_mda\_50}', ...
    ... ela_metamodel
    '$\overline{\phantom{AAAA}}$\qquad\ \ \texttt{l\_s\_adj\_r2}', ... 'lin_simple_adj_r2', ...
    '\texttt{l\_s\_c\_min}', ... 'lin_simple_coef_min', ...
    '\texttt{l\_s\_c\_max}', ... 'lin_simple_coef_max', ...
    '$\Phi_\textrm{MM}$\quad\,\texttt{l\_s\_c\_max\_min}', ... 'lin_simple_coef_max_by_min', ...
    '\texttt{l\_w\_i\_adj\_r2}', ... 'lin_w_interact_adj_r2', ...
    '\texttt{q\_s\_adj\_r2}', ... 'quad_simple_adj_r2', ...
    '\texttt{q\_s\_cond}', ... 'quad_simple_cond', ...
    '\texttt{q\_w\_i\_adj\_r2}', ... 'quad_w_interact_adj_r2', ...
    ... infocontent
    '$\overline{\phantom{AAAA}}$\qquad\qquad\quad\texttt{h\_max}', ...
    '\texttt{eps\_s}', ...
    '$\Phi_\textrm{Inf}$\qquad\qquad\ \,\texttt{eps\_max}', ...
    '\texttt{m0}', ...
    '\texttt{eps\_ratio}', ...
    ... nearest_better
    '$\overline{\phantom{AAAA}}$\quad\ \,\texttt{nb\_std\_ratio}', ...
    '\texttt{nb\_mean\_ratio}', ...
    '$\Phi_\textrm{NBC}$ \qquad\quad\phantom{,} \texttt{nb\_cor}', ...
    '\texttt{dist\_ratio}', ...
    '\texttt{nb\_fitness\_cor}', ...
  };
% create same lengths
% imgFeatNames = cellfun(@(x) sprintf('%30s', x), imgFeatNames, 'UniformOutput', false);

% draw coeffs without colorbar
han{1} = figure('Units', 'centimeters', ...
                'Position', [1 1 sizeX sizeY], ...
                'PaperSize', [sizeX + 2, sizeY + 2]);

% adjust data
plotData = ks_sign_2(featNonId, :)';
% non-significant data
inSignifId = plotData > 0.05;
% data closest to significance level
secondSignifVal = 1e-5;
closeData = plotData > secondSignifVal & plotData <= 0.05;
% change values to preserve one color for insignificant data
plotData(closeData) = secondSignifVal;

% draw image
hold on
imagesc(log10(plotData), 'AlphaData',~isnan(plotData))
colorbar('Ticks', [-300, -250, -200, -150, -100, -50, -5],...
         'TickLabels', {'10^{-300}', '10^{-250}', '10^{-200}', ...
                        '10^{-150}', '10^{-100}', '10^{-50}', '0.05'})

% axis square
ax = gca;
ax.XTick = 1:numel(featNonId);
ax.XTickLabel = imgFeatNames;
ax.YTick = 1:(3*nModel);
ax.YTickLabel = modelSetNames;
ax.XTickLabelRotation = labelRot;
ax.TickLabelInterpreter = 'latex';
grid off
% set(ax, 'visible', 'off')
% set(findall(ax, 'type', 'text'), 'visible', 'on')

% change insignificant data to red
han{1}.Colormap(end, :) = [1 0 0];

hold off

%%

% finalize script
clear
close all

diff --git a/exp/bbob_gptrain_01.m b/exp/bbob_gptrain_01.m
new file mode 100644
index 0000000..7942aae
--- /dev/null
+++ b/exp/bbob_gptrain_01.m
@@ -0,0 +1,227 @@
+function [cmaes_out] = bbob_gptrain_01(id, exp_id, exppath_short, varargin)
+%BBOB_TEST_01 Run BBOB experiment with parameters defined by number 'id'
+% parameters:
+%   id          the number which correspond to one set of parameters
+%               (BBOB parameters, surrogateOpts and CMA-ES parameters)
+%   exp_id      unique string identifier of the experiment
+%   exppath_short        directory where experiment output data will be placed
+%   OPTARG1     directory where local files should be placed ("scratchdir" at metacentrum)
+
+  % GNUPlot script where special strings will be replaced
+  gnuplotScript = 'twoAlgsPlotExtended.gpi';
+
+  % GnuPlot script should be in $ALGROOT/exp/
+  gnuplotScript = [exppath_short filesep '..' filesep gnuplotScript];
+  % Directory for internal results of _this_ function
+  exppath = [exppath_short filesep exp_id];
+  load([exppath filesep 'scmaes_params.mat']);
+  [bbParams, surrogateParams, cmaesParams, nNonBbobValues] = getParamsFromIndex(id, bbParamDef, sgParamDef, cmParamDef);
+
+  % BBOB constant parameters
+  minfunevals = 'dim + 2';  % PUT MINIMAL SENSIBLE NUMBER OF EVALUATIONS for a restart
+  maxrestarts = 1e4;        % SET to zero for an entirely deterministic algorithm
+  bbobpath = 'vendor/bbob';    % should point to fgeneric.m etc.
+  % addpath cannot be in deployed code!
+  % addpath([exppath_short filesep '..' filesep bbobpath]);
+  localDatapath = [];       % directory in the shared folder where results of each instance will be copied through the progress
+  if (nargin >= 4 && ~isempty(varargin{1}))
+    datapath = [varargin{1} filesep 'bbob_output'];
+    if (isempty(strfind(datapath, exppath_short)))
+      localDatapath = [exppath filesep 'bbob_output_tmp'];
+      [~, ~] = mkdir(localDatapath);
+    end
+  else
+    datapath = [exppath filesep 'bbob_output'];
+    % old version:
+    % datapath = ['../log/bbob/' exp_id];  % different folder for each experiment
+  end
+  [~, ~] = mkdir(datapath);
+
+  % opt.algName = exp_description;
+  opt.comments = '';
+
+  % runs an experiment for benchmarking MY_OPTIMIZER
+  % on the noise-free testbed. fgeneric.m and benchmarks.m
+  % must be in the path of Matlab/Octave
+
+  more off;  % in octave pagination is on by default
+
+  t0 = clock;
+  rand('state', sum(100 * t0));
+
+  instances = bbParams.instances;
+  maxfunevals = bbParams.maxfunevals;
+
+  try
+
+  for dim = bbParams.dimensions            % small dimensions first, for CPU reasons
+    % for ifun = benchmarks('FunctionIndices')  % or benchmarksnoisy(...)
+    for ifun = bbParams.functions          % or benchmarksnoisy(...)
+
+      % ===== OUR INTERESTING RESULTS =====
+
+      exp_settings.dim = dim;
+      exp_settings.bbob_function = ifun;
+      exp_settings.exp_id = exp_id;
+      exp_settings.instances = instances;
+
+      expFileID = [num2str(ifun) '_' num2str(dim) 'D_' num2str(id)];
+      resultsFile = [exppath filesep exp_id '_results_' expFileID];
+      opt.algName = [exp_id '_' expFileID];
+      datapath = [datapath filesep expFileID];
+      [~, ~] = mkdir(datapath);
+
+      % ===== PURE CMAES RESULTS =====
+
+      exp_settings.instances = instances;
+
+      cmaesId = floor((id-1) / nNonBbobValues) * nNonBbobValues + 1;
+      % test if pure CMA-ES results exist; if no, generate them
+      cmaesResultsFile = [exppath filesep 'cmaes_results' filesep exp_id '_purecmaes_' num2str(ifun) '_' num2str(dim) 'D_' num2str(cmaesId) '.mat'];
+      % if (~ exist(cmaesResultsFile, 'file'))
+        opt.algName = [exp_id '_' expFileID '_cmaes'];
+        [exp_cmaes_results, tmpFile, cmaes_out] = runTestsForAllInstances(@opt_cmaes, id, exp_settings, datapath, opt, maxrestarts, eval(maxfunevals), eval(minfunevals), t0, exppath, '');
+        for k = 1:length(cmaes_out)
+          cmaes_out{k}.ifun = ifun;
+          cmaes_out{k}.dim = dim;
+        end
+        delete(tmpFile);
+
+        % test if the results still doesn't exist, if no, save them :)
+        % if (~ exist(cmaesResultsFile, 'file'))
+          y_evals = exp_cmaes_results.y_evals;
+          save(cmaesResultsFile, 'exp_id', 'exp_settings', 'exp_cmaes_results', 'y_evals', 'surrogateParams', 'cmaesParams', 'cmaes_out');
+        % end
+      % end
+    end
+    fprintf('---- dimension %d-D done ----\n', dim);
+  end
+
+  catch err
+    save([resultsFile '_ERROR.mat']);
+    fprintf('#########################################################\n');
+    fprintf('#########################################################\n');
+    fprintf('              Matlab ended with error!\n');
+    fprintf('---------------------------------------------------------\n');
+    fprintf('%s\n', err.identifier);
+    fprintf('%s\n', err.message);
+    for sti = 1:length(err.stack)
+      disp(err.stack(sti));
+    end
+    if (exist('exp_results', 'var'))
+      fprintf('---------------------------------------------------------\n');
+      printSettings(1,  exp_settings, exp_results, surrogateParams, cmaesParams);
+    end
+    fprintf('#########################################################\n');
+    fprintf('#########################################################\n');
+    % exit(1);
+  end
+end
+
+function [exp_results, tmpFile, out] = runTestsForAllInstances(opt_function, id, exp_settings, datapath, opt, maxrestarts, maxfunevals, minfunevals, t0, exppath, localDatapath)
+  y_evals = cell(0);
+  out = {};
+
+  t = tic;
+  inst_results_evals = [];
+  inst_results_restarts = [];
+  inst_results_fbests = [];
+  inst_results_f025 = [];
+  inst_results_f050 = [];
+  inst_results_f075 = [];
+  inst_results_stopflags = {};
+  evalsRestartCorrection = 0;
+
+  for iinstance = exp_settings.instances   % 15 function instances
+    fmin = Inf;
+
+    fgeneric('initialize', exp_settings.bbob_function, iinstance, datapath, opt);
+    yeRestarts = [];
+
+    % independent restarts until maxfunevals or ftarget is reached
+    for restarts = 0:maxrestarts
+      if restarts > 0  % write additional restarted info
+        fgeneric('restart', 'independent restart')
+      end
+      if (isequal(opt_function, @opt_cmaes))
+        [xopt, ilaunch, ye, stopflag, out{iinstance}] = opt_function('fgeneric', exp_settings.dim, fgeneric('ftarget'), ...
+                    maxfunevals, id, exppath);
+        out{iinstance}.id = id;
+        out{iinstance}.maxfunevals = maxfunevals;
+        out{iinstance}.instance = iinstance;
+      else
+        [xopt, ilaunch, ye, stopflag] = opt_function('fgeneric', exp_settings.dim, fgeneric('ftarget'), ...
+                    maxfunevals, id, exppath);
+      end
+      % we don't have this information from CMA-ES :(
+      % ye = [res.deltasY res.evaluations];
+
+      if (fmin < Inf)
+        ye(:,1) = min([ye(:,1) repmat(fmin,size(ye,1),1)], [], 2);
+        ye(:,2) = ye(:,2) + evalsRestartCorrection;
+      end
+      fmin = min([ye(:,1); fmin]);
+      yeRestarts = [yeRestarts; ye];
+      evalsRestartCorrection = fgeneric('evaluations');
+
+      if fgeneric('fbest') < fgeneric('ftarget') || ...
+        fgeneric('evaluations') + minfunevals > maxfunevals
+        break;
+      end
+    end
+
+    y_evals = cat(1,y_evals,yeRestarts);
+
+    fprintf(['  f%d in %d-D, instance %d: FEs=%d with %d restarts,' ...
+                  ' fbest-ftarget=%.4e, elapsed time [h]: %.2f\n'], ...
+                exp_settings.bbob_function, exp_settings.dim, iinstance, ...
+                fgeneric('evaluations'), ...
+                restarts, ...
+                fgeneric('fbest') - fgeneric('ftarget'), ...
+                etime(clock, t0)/60/60);
+
+    inst_results_evals = [inst_results_evals fgeneric('evaluations')];
+    inst_results_restarts = [inst_results_restarts restarts];
+    inst_results_fbests = [inst_results_fbests min(y_evals{end}(:,1))];
+    inst_results_f025   = [inst_results_f025 y_evals{end}( max([1 floor(size(y_evals{end},1)/4)]) ,1)];
+    inst_results_f050   = [inst_results_f050 y_evals{end}( max([1 floor(size(y_evals{end},1)/2)]) ,1)];
+    inst_results_f075   = [inst_results_f075 y_evals{end}( max([1 floor(3*size(y_evals{end},1)/4)]) ,1)];
+    inst_results_stopflags{end+1} = stopflag;
+
+    fgeneric('finalize');
+    tmpFile = [exppath filesep exp_settings.exp_id '_tmp_' num2str(id) '.mat'];
+    exp_id = exp_settings.exp_id;
+    save(tmpFile, 'exp_settings', 'exp_id', 'y_evals');
+  end
+  disp(['      date and time: ' num2str(clock, ' %.0f')]);
+
+  elapsedTime = toc(t);
+
+  exp_results.evals = inst_results_evals;
+  exp_results.restarts = inst_results_restarts;
+  exp_results.f025 = inst_results_f025;
+  exp_results.f050 = inst_results_f050;
+  exp_results.f075 = inst_results_f075;
+  exp_results.fbests = inst_results_fbests;
+  exp_results.stopflags = inst_results_stopflags;
+  exp_results.y_evals = y_evals;
+  exp_results.time = elapsedTime;
+end
+
+function printSettings(fid, exp_settings, exp_results, surrogateParams, cmaesParams)
+  fprintf(fid, '===== Experiment: %s =====\n\n', exp_settings.exp_id);
+  fprintf(fid, '== BBOB experiment settings: ==\n');
+  fprintf(fid, sprintfStruct(exp_settings));
+  fprintf(fid, '%15s: %f\n', 'time elapsed', exp_results.time);
+  fprintf(fid, '\n== Surrogate model parameters: ==\n');
+  fprintf(fid, sprintfStruct(surrogateParams));
+  fprintf(fid, '\n== CMA-ES parameters: ==\n');
+  fprintf(fid, sprintfStruct(cmaesParams));
+    fprintf(fid, '\n== CMA-ES surrogate model options: ==\n');
+  fprintf(fid, sprintfStruct(surrogateParams.modelOpts));
+  fprintf(fid, '\n== Numerical results: ==\n\n');
+  fprintf(fid, 'fbests:\n%s\n\n', num2str(exp_results.fbests));
+  fprintf(fid, 'f075:\n%s\n\n', num2str(exp_results.f075));
+  fprintf(fid, 'f050:\n%s\n\n', num2str(exp_results.f050));
+  fprintf(fid, 'f025:\n%s\n\n', num2str(exp_results.f025));
+end
diff --git a/exp/experiments/cmaeslog.patch b/exp/experiments/cmaeslog.patch
index 7a89377..f4753cc 100644
--- a/exp/experiments/cmaeslog.patch
+++ b/exp/experiments/cmaeslog.patch
@@ -1,278 +0,0 @@
-diff --git a/exp/bbob_gptrain_01.m b/exp/bbob_gptrain_01.m
-new file mode 100644
-index 0000000..76b4179
---- /dev/null
-+++ b/exp/bbob_gptrain_01.m
-@@ -0,0 +1,227 @@
-+function [cmaes_out] = bbob_gptrain_01(id, exp_id, exppath_short, varargin)
-+%BBOB_TEST_01 Run BBOB experiment with parameters defined by number 'id'
-+% parameters:
-+%   id          the number which correspond to one set of parameters
-+%               (BBOB parameters, surrogateOpts and CMA-ES parameters)
-+%   exp_id      unique string identifier of the experiment
-+%   exppath_short        directory where experiment output data will be placed
-+%   OPTARG1     directory where local files should be placed ("scratchdir" at metacentrum)
-+
-+  % GNUPlot script where special strings will be replaced
-+  gnuplotScript = 'twoAlgsPlotExtended.gpi';
-+
-+  % GnuPlot script should be in $ALGROOT/exp/
-+  gnuplotScript = [exppath_short filesep '..' filesep gnuplotScript];
-+  % Directory for internal results of _this_ function
-+  exppath = [exppath_short filesep exp_id];
-+  load([exppath filesep 'scmaes_params.mat']);
-+  [bbParams, surrogateParams, cmaesParams, nNonBbobValues] = getParamsFromIndex(id, bbParamDef, sgParamDef, cmParamDef);
-+
-+  % BBOB constant parameters
-+  minfunevals = 'dim + 2';  % PUT MINIMAL SENSIBLE NUMBER OF EVALUATIONS for a restart
-+  maxrestarts = 1e4;        % SET to zero for an entirely deterministic algorithm
-+  bbobpath = 'vendor/bbob';    % should point to fgeneric.m etc.
-+  % addpath cannot be in deployed code!
-+  % addpath([exppath_short filesep '..' filesep bbobpath]);
-+  localDatapath = [];       % directory in the shared folder where results of each instance will be copied through the progress
-+  if (nargin >= 4 && ~isempty(varargin{1}))
-+    datapath = [varargin{1} filesep 'bbob_output'];
-+    if (isempty(strfind(datapath, exppath_short)))
-+      localDatapath = [exppath filesep 'bbob_output_tmp'];
-+      [~, ~] = mkdir(localDatapath);
-+    end
-+  else
-+    datapath = [exppath filesep 'bbob_output'];
-+    % old version:
-+    % datapath = ['../log/bbob/' exp_id];  % different folder for each experiment
-+  end
-+  [~, ~] = mkdir(datapath);
-+
-+  % opt.algName = exp_description;
-+  opt.comments = '';
-+
-+  % runs an experiment for benchmarking MY_OPTIMIZER
-+  % on the noise-free testbed. fgeneric.m and benchmarks.m
-+  % must be in the path of Matlab/Octave
-+
-+  more off;  % in octave pagination is on by default
-+
-+  t0 = clock;
-+  rand('state', sum(100 * t0));
-+
-+  instances = bbParams.instances;
-+  maxfunevals = bbParams.maxfunevals;
-+
-+  try
-+
-+  for dim = bbParams.dimensions            % small dimensions first, for CPU reasons
-+    % for ifun = benchmarks('FunctionIndices')  % or benchmarksnoisy(...)
-+    for ifun = bbParams.functions          % or benchmarksnoisy(...)
-+
-+      % ===== OUR INTERESTING RESULTS =====
-+
-+      exp_settings.dim = dim;
-+      exp_settings.bbob_function = ifun;
-+      exp_settings.exp_id = exp_id;
-+      exp_settings.instances = instances;
-+
-+      expFileID = [num2str(ifun) '_' num2str(dim) 'D_' num2str(id)];
-+      resultsFile = [exppath filesep exp_id '_results_' expFileID];
-+      opt.algName = [exp_id '_' expFileID];
-+      datapath = [datapath filesep expFileID];
-+      [~, ~] = mkdir(datapath);
-+
-+      % ===== PURE CMAES RESULTS =====
-+
-+      exp_settings.instances = instances;
-+
-+      cmaesId = floor((id-1) / nNonBbobValues) * nNonBbobValues + 1;
-+      % test if pure CMA-ES results exist; if no, generate them
-+      cmaesResultsFile = [exppath filesep 'cmaes_results' filesep exp_id '_purecmaes_' num2str(ifun) '_' num2str(dim) 'D_' num2str(cmaesId) '.mat'];
-+      % if (~ exist(cmaesResultsFile, 'file'))
-+        opt.algName = [exp_id '_' expFileID '_cmaes'];
-+        [exp_cmaes_results, tmpFile, cmaes_out] = runTestsForAllInstances(@opt_cmaes, id, exp_settings, datapath, opt, maxrestarts, eval(maxfunevals), eval(minfunevals), t0, exppath, '');
-+        for k = 1:length(cmaes_out)
-+          cmaes_out{k}.ifun = ifun;
-+          cmaes_out{k}.dim = dim;
-+        end
-+        delete(tmpFile);
-+
-+        % test if the results still doesn't exist, if no, save them :)
-+        if (~ exist(cmaesResultsFile, 'file'))
-+          y_evals = exp_cmaes_results.y_evals;
-+          save(cmaesResultsFile, 'exp_id', 'exp_settings', 'exp_cmaes_results', 'y_evals', 'surrogateParams', 'cmaesParams', 'cmaes_out');
-+        end
-+      % end
-+    end
-+    fprintf('---- dimension %d-D done ----\n', dim);
-+  end
-+
-+  catch err
-+    save([resultsFile '_ERROR.mat']);
-+    fprintf('#########################################################\n');
-+    fprintf('#########################################################\n');
-+    fprintf('              Matlab ended with error!\n');
-+    fprintf('---------------------------------------------------------\n');
-+    fprintf('%s\n', err.identifier);
-+    fprintf('%s\n', err.message);
-+    for sti = 1:length(err.stack)
-+      disp(err.stack(sti));
-+    end
-+    if (exist('exp_results', 'var'))
-+      fprintf('---------------------------------------------------------\n');
-+      printSettings(1,  exp_settings, exp_results, surrogateParams, cmaesParams);
-+    end
-+    fprintf('#########################################################\n');
-+    fprintf('#########################################################\n');
-+    % exit(1);
-+  end
-+end
-+
-+function [exp_results, tmpFile, out] = runTestsForAllInstances(opt_function, id, exp_settings, datapath, opt, maxrestarts, maxfunevals, minfunevals, t0, exppath, localDatapath)
-+  y_evals = cell(0);
-+  out = {};
-+
-+  t = tic;
-+  inst_results_evals = [];
-+  inst_results_restarts = [];
-+  inst_results_fbests = [];
-+  inst_results_f025 = [];
-+  inst_results_f050 = [];
-+  inst_results_f075 = [];
-+  inst_results_stopflags = {};
-+  evalsRestartCorrection = 0;
-+
-+  for iinstance = exp_settings.instances   % 15 function instances
-+    fmin = Inf;
-+
-+    fgeneric('initialize', exp_settings.bbob_function, iinstance, datapath, opt);
-+    yeRestarts = [];
-+
-+    % independent restarts until maxfunevals or ftarget is reached
-+    for restarts = 0:maxrestarts
-+      if restarts > 0  % write additional restarted info
-+        fgeneric('restart', 'independent restart')
-+      end
-+      if (isequal(opt_function, @opt_cmaes))
-+        [xopt, ilaunch, ye, stopflag, out{iinstance}] = opt_function('fgeneric', exp_settings.dim, fgeneric('ftarget'), ...
-+                    maxfunevals, id, exppath);
-+        out{iinstance}.id = id;
-+        out{iinstance}.maxfunevals = maxfunevals;
-+        out{iinstance}.instance = iinstance;
-+      else
-+        [xopt, ilaunch, ye, stopflag] = opt_function('fgeneric', exp_settings.dim, fgeneric('ftarget'), ...
-+                    maxfunevals, id, exppath);
-+      end
-+      % we don't have this information from CMA-ES :(
-+      % ye = [res.deltasY res.evaluations];
-+
-+      if (fmin < Inf)
-+        ye(:,1) = min([ye(:,1) repmat(fmin,size(ye,1),1)], [], 2);
-+        ye(:,2) = ye(:,2) + evalsRestartCorrection;
-+      end
-+      fmin = min([ye(:,1); fmin]);
-+      yeRestarts = [yeRestarts; ye];
-+      evalsRestartCorrection = fgeneric('evaluations');
-+
-+      if fgeneric('fbest') < fgeneric('ftarget') || ...
-+        fgeneric('evaluations') + minfunevals > maxfunevals
-+        break;
-+      end
-+    end
-+
-+    y_evals = cat(1,y_evals,yeRestarts);
-+
-+    fprintf(['  f%d in %d-D, instance %d: FEs=%d with %d restarts,' ...
-+                  ' fbest-ftarget=%.4e, elapsed time [h]: %.2f\n'], ...
-+                exp_settings.bbob_function, exp_settings.dim, iinstance, ...
-+                fgeneric('evaluations'), ...
-+                restarts, ...
-+                fgeneric('fbest') - fgeneric('ftarget'), ...
-+                etime(clock, t0)/60/60);
-+
-+    inst_results_evals = [inst_results_evals fgeneric('evaluations')];
-+    inst_results_restarts = [inst_results_restarts restarts];
-+    inst_results_fbests = [inst_results_fbests min(y_evals{end}(:,1))];
-+    inst_results_f025   = [inst_results_f025 y_evals{end}( max([1 floor(size(y_evals{end},1)/4)]) ,1)];
-+    inst_results_f050   = [inst_results_f050 y_evals{end}( max([1 floor(size(y_evals{end},1)/2)]) ,1)];
-+    inst_results_f075   = [inst_results_f075 y_evals{end}( max([1 floor(3*size(y_evals{end},1)/4)]) ,1)];
-+    inst_results_stopflags{end+1} = stopflag;
-+
-+    fgeneric('finalize');
-+    tmpFile = [exppath filesep exp_settings.exp_id '_tmp_' num2str(id) '.mat'];
-+    exp_id = exp_settings.exp_id;
-+    save(tmpFile, 'exp_settings', 'exp_id', 'y_evals');
-+  end
-+  disp(['      date and time: ' num2str(clock, ' %.0f')]);
-+
-+  elapsedTime = toc(t);
-+
-+  exp_results.evals = inst_results_evals;
-+  exp_results.restarts = inst_results_restarts;
-+  exp_results.f025 = inst_results_f025;
-+  exp_results.f050 = inst_results_f050;
-+  exp_results.f075 = inst_results_f075;
-+  exp_results.fbests = inst_results_fbests;
-+  exp_results.stopflags = inst_results_stopflags;
-+  exp_results.y_evals = y_evals;
-+  exp_results.time = elapsedTime;
-+end
-+
-+function printSettings(fid, exp_settings, exp_results, surrogateParams, cmaesParams)
-+  fprintf(fid, '===== Experiment: %s =====\n\n', exp_settings.exp_id);
-+  fprintf(fid, '== BBOB experiment settings: ==\n');
-+  fprintf(fid, sprintfStruct(exp_settings));
-+  fprintf(fid, '%15s: %f\n', 'time elapsed', exp_results.time);
-+  fprintf(fid, '\n== Surrogate model parameters: ==\n');
-+  fprintf(fid, sprintfStruct(surrogateParams));
-+  fprintf(fid, '\n== CMA-ES parameters: ==\n');
-+  fprintf(fid, sprintfStruct(cmaesParams));
-+    fprintf(fid, '\n== CMA-ES surrogate model options: ==\n');
-+  fprintf(fid, sprintfStruct(surrogateParams.modelOpts));
-+  fprintf(fid, '\n== Numerical results: ==\n\n');
-+  fprintf(fid, 'fbests:\n%s\n\n', num2str(exp_results.fbests));
-+  fprintf(fid, 'f075:\n%s\n\n', num2str(exp_results.f075));
-+  fprintf(fid, 'f050:\n%s\n\n', num2str(exp_results.f050));
-+  fprintf(fid, 'f025:\n%s\n\n', num2str(exp_results.f025));
-+end
-diff --git a/exp/metacentrum_task_matlab.m b/exp/metacentrum_task_matlab.m
-index c08b928..ca78280 100644
---- a/exp/metacentrum_task_matlab.m
-+++ b/exp/metacentrum_task_matlab.m
-@@ -1,4 +1,4 @@
--function metacentrum_task_matlab(exp_id, exppath_short, id, varargin)
-+function cmaes_out = metacentrum_task_matlab(exp_id, exppath_short, id, varargin)
- 
-   % NFS file for logging results
-   USE_FILELOG = 1;
-@@ -96,7 +96,9 @@ function metacentrum_task_matlab(exp_id, exppath_short, id, varargin)
-   % CORE COMPUTATION (begin)
-   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
- 
--  bbob_test_01(id, exp_id, exppath_short, OUTPUTDIR);
-+  % bbob_test_01(id, exp_id, exppath_short, OUTPUTDIR);
-+
-+  cmaes_out = bbob_gptrain_01(id, exp_id, exppath_short, OUTPUTDIR);
- 
-   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
-   % CORE COMPUTATION (end)
-diff --git a/exp/opt_cmaes.m b/exp/opt_cmaes.m
-index 8bce5e5..ee15261 100644
---- a/exp/opt_cmaes.m
-+++ b/exp/opt_cmaes.m
-@@ -1,4 +1,4 @@
--function [x, ilaunch, y_evals, stopflag] = opt_cmaes(FUN, DIM, ftarget, maxfunevals, id, varargin)
-+function [x, ilaunch, y_evals, stopflag, varargout] = opt_cmaes(FUN, DIM, ftarget, maxfunevals, id, varargin)
- % minimizes FUN in DIM dimensions by multistarts of fminsearch.
- % ftarget and maxfunevals are additional external termination conditions,
- % where at most 2 * maxfunevals function evaluations are conducted.
-@@ -48,6 +48,13 @@ for ilaunch = 1:1e4; % up to 1e4 times
-   n_y_evals = size(y_eval,1);
-   y_eval(:,1) = y_eval(:,1) - (ftarget - fDelta) * ones(n_y_evals,1);
-   y_evals = [y_evals; y_eval];
-+
-+  if (nargout > 0)
-+    varargout{1} = out;
-+  else
-+    varargout = cell();
-+  end
-+
-   % terminate if ftarget or maxfunevals reached
-   if (feval(FUN, 'fbest') < ftarget || ...
-       feval(FUN, 'evaluations') >= maxfunevals)
diff --git a/exp/metacentrum_task_matlab.m b/exp/metacentrum_task_matlab.m
index 98679ba..ca78280 100644
--- a/exp/metacentrum_task_matlab.m
+++ b/exp/metacentrum_task_matlab.m
@@ -1,4 +1,4 @@
-function metacentrum_task_matlab(exp_id, exppath_short, id, varargin)
+function cmaes_out = metacentrum_task_matlab(exp_id, exppath_short, id, varargin)
 
   % NFS file for logging results
   USE_FILELOG = 1;
@@ -96,7 +96,9 @@ function metacentrum_task_matlab(exp_id, exppath_short, id, varargin)
   % CORE COMPUTATION (begin)
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
 
-  bbob_test_01(id, exp_id, exppath_short, OUTPUTDIR);
+  % bbob_test_01(id, exp_id, exppath_short, OUTPUTDIR);
+
+  cmaes_out = bbob_gptrain_01(id, exp_id, exppath_short, OUTPUTDIR);
 
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   % CORE COMPUTATION (end)
diff --git a/exp/opt_cmaes.m b/exp/opt_cmaes.m
index 8bce5e5..ee15261 100644
--- a/exp/opt_cmaes.m
+++ b/exp/opt_cmaes.m
@@ -1,4 +1,4 @@
-function [x, ilaunch, y_evals, stopflag] = opt_cmaes(FUN, DIM, ftarget, maxfunevals, id, varargin)
+function [x, ilaunch, y_evals, stopflag, varargout] = opt_cmaes(FUN, DIM, ftarget, maxfunevals, id, varargin)
 % minimizes FUN in DIM dimensions by multistarts of fminsearch.
 % ftarget and maxfunevals are additional external termination conditions,
 % where at most 2 * maxfunevals function evaluations are conducted.
@@ -48,6 +48,13 @@ for ilaunch = 1:1e4; % up to 1e4 times
   n_y_evals = size(y_eval,1);
   y_eval(:,1) = y_eval(:,1) - (ftarget - fDelta) * ones(n_y_evals,1);
   y_evals = [y_evals; y_eval];
+
+  if (nargout > 0)
+    varargout{1} = out;
+  else
+    varargout = cell();
+  end
+
   % terminate if ftarget or maxfunevals reached
   if (feval(FUN, 'fbest') < ftarget || ...
       feval(FUN, 'evaluations') >= maxfunevals)
diff --git a/src/cmaes/s_cmaes.m b/src/cmaes/s_cmaes.m
index f75225c..2925434 100644
--- a/src/cmaes/s_cmaes.m
+++ b/src/cmaes/s_cmaes.m
@@ -364,12 +364,15 @@ opts.SaveFilename = deblank(opts.SaveFilename); % remove trailing white spaces
 
 
 y_eval = [];  % BAJELUK BEST/COUNTEVAL RECORDING
-out.arxvalids = {};
+out.generationStarts = [];
+out.arxvalids = [];
+out.fvalues = [];
+out.generations = [];
 out.BDs = {};
-out.sigmas = {};
-out.fvalues = {};
-out.means = {};
-out.countevals = {};
+out.sigmas = [];
+out.means = [];
+out.countevals = [];
+
 
 %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
 counteval = 0; countevalNaN = 0; 
@@ -925,12 +928,14 @@ while isempty(stopflag)
   % Surrogate CMA-ES end
 
   % BAJELUK -- population, covariance matrix, sigma and fvalues logging
-  out.arxvalids{countiter} = arxvalid;
+  out.generationStarts(end+1) = length(out.generations) + 1;
+  out.arxvalids(:,end+(1:popsize)) = arxvalid;
+  out.fvalues(1,end+(1:popsize)) = fitness.raw;
+  out.generations(1,end+(1:popsize)) = countiter;
   out.BDs{countiter} = BD;
-  out.sigmas{countiter} = sigma;
-  out.fvalues{countiter} = fitness.raw;
-  out.means{countiter} = xmean;
-  out.countevals{countiter} = counteval;
+  out.sigmas(end+1) = sigma;
+  out.means(:,end+1) = xmean;
+  out.countevals(end+1) = counteval;
 
 
   fitness.sel = fitness.raw; 

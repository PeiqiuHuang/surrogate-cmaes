exp_id = 'exp_metaLearn_05';
exppath_short = 'exp/experiments';
exp_description = 'Experiment with meta-learning models. Instance sampling in each fold. Improved LHS design. Split functions requiring normality removed';

lik = log(0.01);
covBounds = [log([0.01 100]); log([0.01 1e6])];

modelOptions = { ...
  'gp', { ...
    'hypOptions',         { ...
      struct( ...
        'covFcn',             { '@covSEiso' }, ...
        'hyp',                { struct('lik', lik, ...
                                       'cov', {{'log(mean(std(X)))'; 'log(std(yTrain)/sqrt(2))'}} ) }, ...
        'covBounds',          { covBounds } ...
      ), ...
      struct( ...
        'covFcn',             { '@covSEard' }, ...
        'hyp',                { struct('lik', lik, ...
                                       'cov', {{'log(std(X))'; 'log(std(yTrain)/sqrt(2))'}} ) }, ...
        'covBounds',          { covBounds } ...
      ), ...
      struct( ...
        'covFcn',             { '{@covMaterniso, 5}' }, ...
        'hyp',                { struct('lik', lik, ...
                                       'cov', {{'log(mean(std(X)))'; 'log(std(yTrain)/sqrt(2))'}} ) }, ...
        'covBounds',          { covBounds } ...
      ), ...
      struct( ...
        'covFcn',             { '{@covMaterniso, 3}' }, ...
        'hyp',                { struct('lik', lik, ...
                                       'cov', {{'log(mean(std(X)))'; 'log(std(yTrain)/sqrt(2))'}} ) }, ...
        'covBounds',          { covBounds } ...
      ), ...
      struct( ...
        'covFcn',             { '{@covMaterniso, 1}' }, ...
        'hyp',                { struct('lik', lik, ...
                                       'cov', {{'log(mean(std(X)))'; 'log(std(yTrain)/sqrt(2))'}} ) }, ...
        'covBounds',          { covBounds } ...
      ), ...
      struct( ...
        'covFcn',             { '{@covMaternard, 5}' }, ...
        'hyp',                { struct('lik', lik, ...
                                       'cov', {{'log(std(X))'; 'log(std(yTrain)/sqrt(2))'}} ) }, ...
        'covBounds',          { covBounds } ...
      ), ...
      struct( ...
        'covFcn',             { '{@covMaternard, 3}' }, ...
        'hyp',                { struct('lik', lik, ...
                                       'cov', {{'log(std(X))'; 'log(std(yTrain)/sqrt(2))'}} ) }, ...
        'covBounds',          { covBounds } ...
      ), ...
      struct( ...
        'covFcn',             { '{@covMaternard, 1}' }, ...
        'hyp',                { struct('lik', lik, ...
                                       'cov', {{'log(std(X))'; 'log(std(yTrain)/sqrt(2))'}} ) }, ...
        'covBounds',          { covBounds } ...
      ), ...
      struct( ...
        'covFcn',             { '@covRQiso' }, ...
        'hyp',                { struct('lik', lik, ...
                                       'cov', {{'log(mean(std(X)))'; 'log(std(yTrain)/sqrt(2))'; 'log(1)'}} ) }, ...
        'covBounds',          { [covBounds; log([0.01 100])] } ...
      ), ...
      struct( ...
        'covFcn',             { '@covRQard' }, ...
        'hyp',                { struct('lik', lik, ...
                                       'cov', {{'log(std(X))'; 'log(std(yTrain)/sqrt(2))'; 'log(1)'}} ) }, ...
        'covBounds',          { [covBounds; log([0.01 100])] } ...
      ), ...
      struct( ...
        'covFcn',             { '@covNNone' }, ...
        'hyp',                { struct('lik', lik, ...
                                       'cov', {{'log(mean(std(X)))'; 'log(std(yTrain)/sqrt(2))' }} ) }, ...
        'covBounds',          { covBounds } ...
      ), ...
      struct( ...
        'covFcn',             { '{@covPERiso, {@covSEiso}}' }, ...
        'hyp',                { struct('lik', lik, ...
                                       'cov', {{'log(max(range(X))/10)'; 'log(mean(std(X)))'; 'log(std(yTrain)/sqrt(2))'}} ) }, ...
        'covBounds',          { [log(0.01) log(100); covBounds] } ...
      ), ...
      struct( ...
        'covFcn',             { '{@covPERard, {@covSEiso}}' }, ...
        'hyp',                { struct('lik', lik, ...
                                       'cov', {{'log(range(X)./10)'; 'log(mean(std(X)))'; 'log(std(yTrain)/sqrt(2))'}} ) }, ...
        'covBounds',          { [log(0.01) log(100); covBounds] } ...
      ), ...
      struct( ...
        'covFcn',             { '{@covADD, {[1, 2, 3, 5, 7, 10], @covSEisoU}}' }, ...
        'hyp',                { struct('lik', lik, ...
                                       'cov', {{'log(mean(std(X)))'; 0.1}} ) }, ...
        'covBounds',          { [covBounds(1, :); [0 1e3]] } ...
      ), ...
    }, ...
    'meanFcn',            { 'meanConst' }, ...
    'trainAlgorithm',     { 'fmincon' }, ...
    'predictionType',     { 'fvalues' }, ...
    'useShift',           { false }, ...
    'normalizeY',         { true }, ...
    'nRestarts',          { 5 }, ...
    'cmaesCheckBounds',   { false }, ...
  }, ...
  'forest', { ...
    'forestType',          { 'bagging' }, ...
    'rf_boosting',         { false }, ...
    'tree_growFull',       { true }, ...
    'tree_predictorFunc',  { @CombiPolynomialModel }, ...
    'tree_minParentSize',  { 4 }, ...
    'weak_modelSpec',      { {'constant', 'linear', 'purequadratic', 'interactions', 'quadratic'} }, ...
    'tree_splitFunc',      { @AxisSplit, @GaussianSplit, @HillClimbingObliqueSplit, @PairObliqueSplit, @ResidualObliqueSplit }, ...
    'tree_splitGainFunc',  { @DENNSplitGain, @MSESplitGain, @VarSplitGain }, ...
    'splitGain_modelFunc', { @CombiPolynomialModel }, ...
    'split_nQuantize',     { 10 }, ...
    'split_nRepeats',      { 1000 }, ...
    'split_maxHyp',        { '10*dim' }
  }, ...
  'xgb', { ...
    'forestType',          { 'xgboost' }, ...
    'rf_boosting',         { true }, ...
    'tree_growFull',       { false }, ...
    'tree_predictorFunc',  { @ConstantModel }, ...
    'tree_minParentSize',  { 4 }, ...
    'weak_modelSpec',      { 'constant' }, ...
    'tree_splitFunc',      { @AxisSplit, @GaussianSplit, @HillClimbingObliqueSplit, @PairObliqueSplit, @ResidualObliqueSplit }, ...
    'tree_splitGainFunc',  { @GradientSplitGain }, ...
    'tree_maxDepth',       { 8 }, ...
    'splitGain_modelFunc', { @Constant }, ...
    'split_nQuantize',     { 10 }, ...
    'split_nRepeats',      { 1000 }, ...
    'split_maxHyp',        { '10*dim' }
  } ...
};

% randommized options
rf_rndOptions = struct( ...
  'rf_nTrees', { 2.^[6 7 8 9 10] }, ...
  'rf_nFeaturesToSample', {{ 'ceil(0.25*dim)', 'ceil(0.5*dim)', 'ceil(0.75*dim)', 'dim' }}, ...
  'rf_inBagFraction', {[ 0.25, 0.5, 0.75, 1.0 ]} ...
);

opts.rndModelOptions = struct( ...
  'forest', rf_rndOptions, ...
  'xgb', rf_rndOptions ...
);

opts.modelTypes = { 'forest', 'xgb', 'gp' };
opts.inst_subsamp = true;

% CV settings
opts.cv_type = 'KFold';
opts.cv_param = 5;
opts.cv_ind = 1:opts.cv_param;

% the CV can be run in a parallel worker pool
opts.use_parpool = true;

% RNG options
opts.use_rng_seed = true;
opts.rng_seed = 42;

% I/O
opts.fname_template = strjoin({'data_metalearn_', ...
  '%dD_', ...
  'f%d_', ...
  'inst%d_', ...
  'N%d_', ...
  'design-%s.mat'}, '' ...
);
opts.res_path = fullfile('../../../..', exp_id, 'results');
opts.dataset_path = 'data_metalearning';
opts.rewrite_results = false;

% logDir = '/storage/plzen1/home/repjak/public';
